{"version":3,"sources":["checkmark.png","components/AddCart/AddCart.js","components/Product/Product.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AddCart","props","Fragment","checkout","className","src","checkmark","alt","price","onClick","closeCheckoutHandler","quatity","clearCart","checkoutHandler","Product","setState","addcart","item","cart","myquantity","tquantity","state","isLoaded","error","fetch","then","response","json","data","items","cartInd","targetId","this","length","forEach","c","i","id","copyCart","prevState","console","log","message","map","key","image","offer","brand_name","product_name","mrp","e","addToCart","removeFromCart","disabled","citem","cindex","Component","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.cf61a2b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/checkmark.d55c14bd.png\";","import React from 'react'\nimport \"./AddCart.css\";\nimport checkmark from '../../checkmark.png'\nfunction AddCart(props) {\n    // console.log('props from addcart', props)\n\n    return (\n        <React.Fragment>\n            {\n                props.checkout ?\n\n                    <div className=\"popupModal\">\n                        <h2>Checkout</h2>\n                        <img src={checkmark} alt=\"checkmark\" className=\"checkmark-icon\" />\n                        <p>\n                            Total Price of Rs {props.price}-/ paid successfully\n\n                        </p>\n                        <button onClick={props.closeCheckoutHandler} className=\"closeButton\">x</button>\n                    </div>\n                    : ''\n            }\n\n\n            <div className=\"addcart\">\n                <span className=\"cart-qp\">\n                    <button>Qty: {props.quatity}</button>\n                    <button>Total Price: {props.price}</button>\n                </span>\n                <div className=\"flexgap\"></div>\n                <div className=\"cart-cc\">\n\n                    <button onClick={props.clearCart}>Clear Cart</button>\n                    <button onClick={props.checkoutHandler}>Checkout</button>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default AddCart\n","import React, { Component } from 'react'\nimport './Product.css';\nimport AddCart from '../AddCart/AddCart';\n\nexport default class Product extends Component {\n    constructor() {\n        super()\n        this.state = {\n            addcart: false,\n            checkout: false,\n            isLoaded: false,\n            error: '',\n            item: [],\n            cart: [],\n            myquantity: 0,\n            tquantity: 0,\n            price: 0,\n        }\n    }\n\n    componentDidMount() {\n        const URL = './data.json'\n        // const URL = \"https://fakestoreapi.com/products\"\n        fetch(URL)\n            .then(response => {\n                return response.json();\n            })\n            .then(data => {\n                this.setState({\n                    isLoaded: true,\n                    items: data\n                });\n            },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n\n\n    addToCart(item) {\n        let cartInd = 0;\n        let targetId = 0;\n        if (this.state.cart.length <= 0) {\n            this.setState({ cart: [...this.state.cart, item] });\n        } else {\n            this.state.cart.forEach((c, i) => {\n                if (c.id === item.id) {\n                    cartInd = i;\n                    targetId = item.id;\n                }\n            });\n        }\n        if (targetId === item.id) {\n            let copyCart = this.state.cart;\n            copyCart[cartInd].tquantity += 1;\n            this.setState({ cart: copyCart });\n        } else {\n            this.setState({ cart: [...this.state.cart, item] });\n        }\n\n        // ========================= total update ======================\n        this.setState(prevState => ({\n            addcart: true,\n            myquantity: prevState.myquantity + 1,\n            price: prevState.price + item.price,\n        }))\n\n    }\n\n    removeFromCart(item) {\n        let cartInd = 0;\n        let targetId = 0;\n        if (this.state.cart.length <= 0) {\n            this.setState({ cart: [...this.state.cart, item] });\n        } else {\n            this.state.cart.forEach((c, i) => {\n                if (c.id === item.id) {\n                    cartInd = i;\n                    targetId = item.id;\n                }\n            });\n        }\n        if (targetId === item.id) {\n            let copyCart = this.state.cart;\n            copyCart[cartInd].tquantity -= 1;\n            this.setState({ cart: copyCart });\n        } else {\n            this.setState({ cart: [...this.state.cart, item] });\n        }\n\n        // ========================= total update ======================\n        this.setState(prevState => ({\n            addcart: true,\n            myquantity: prevState.myquantity - 1,\n            price: prevState.price - item.price,\n        }))\n\n    }\n\n    clearCart = () => {\n        this.setState({\n            addcart: false,\n            checkout: false,\n            item: [],\n            cart: [],\n            myquantity: 0,\n            tquantity: 0,\n\n        })\n    }\n\n    checkoutHandler = (item) => {\n        this.setState({\n            checkout: true,\n            price: item.price\n        })\n    }\n\n    closeCheckoutHandler = () => {\n        this.setState({\n            checkout: false\n        })\n    }\n\n    render() {\n        const { items, error, isLoaded, price, addcart, checkout, cart, myquantity } = this.state;\n        console.log(' items ====', items)\n        console.log('this.state.cart ===>', this.state.cart)\n        // console.log('cart each quatitiy', eachiq)\n        // console.log('mytquantity', myquantity)\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return (\n                <React.Fragment>\n                    {\n                        items.map(item => (\n                            <div className=\"product\" key={item.id}>\n                                <div className=\"product-img\">\n                                    <img src={item.image} alt=\"product\" className=\"productimg\" />\n                                    <p>flat {item.offer} off</p>\n                                </div>\n                                <div className=\"product-details\">\n                                    <ul>\n                                        <li>{item.brand_name}</li>\n                                        <li>{item.product_name}</li>\n                                        <li>{item.quatity}</li>\n                                        <li>MRP: {item.mrp}</li>\n                                        <li>Rs: {item.price}</li>\n                                        <li className=\"add-cart\">\n                                            <button onClick={(e) => this.addToCart(item)} >Add Cart</button>\n                                            {\n                                                item.tquantity > 0 ?\n                                                    <button onClick={() => this.removeFromCart(item)}>-</button>\n                                                    :\n                                                    <button onClick={() => this.removeFromCart(item)} className=\"btn-disabled\" disabled>-</button>\n\n\n                                            }\n\n                                            {(cart.length === 0 || cart == null) ? <button > 0 </button> :\n                                                <button >\n                                                    {\n                                                        cart.length > 0 &&\n                                                        cart.map((citem, cindex) => (\n                                                            <p key={cindex}> {citem.id === item.id ? citem.tquantity : \"\"} </p>\n                                                        ))\n\n                                                    }\n                                                </button>\n                                            }\n                                            <button onClick={() => this.addToCart(item)}>+</button>\n                                        </li>\n                                    </ul>\n                                </div>\n                                {\n                                    addcart ? <AddCart\n                                        quatity={myquantity} checkout={checkout} price={price}\n                                        clearCart={this.clearCart}\n                                        checkoutHandler={() => this.checkoutHandler(item)}\n                                        closeCheckoutHandler={this.closeCheckoutHandler}\n                                    />\n                                        : ''\n                                }\n                            </div>\n                        ))\n                    }\n                </React.Fragment>\n\n            )\n        }\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Product from './components/Product/Product';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"products-list\">\n          <h2>Product List</h2>\n          <div className=\"all-product-list\">\n            <Product />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}