{"version":3,"sources":["checkmark.png","components/Checkout/Checkout.js","components/AddCart/AddCart.js","components/Product/Product.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Checkout","AddCart","props","Fragment","checkout","className","src","checkmark","alt","price","onClick","closeCheckoutHandler","quatity","clearCart","checkoutHandler","Product","addItemToCartHandler","item","state","cart","length","map","c","index","id","cartCopy","tquantity","setState","console","log","prevState","addcart","myquantity","isLoaded","error","eachiq","fetch","then","response","json","data","items","this","removeCartHandler","message","key","image","offer","brand_name","product_name","mrp","e","disabled","Component","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1bfcedca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/checkmark.d55c14bd.png\";","import React from 'react';\nimport './Checkout.css';\n\nfunction Checkout(props) {\n    console.log('checkout from checkout', props.checkout)\n    return (props.checkout ?\n\n        <div className=\"popupModal\">\n            {props.price}\n            <button onClick={props.closeCheckoutHandler} className=\"closeButton\">x</button>\n        </div>\n        : ''\n    )\n}\n\nexport default Checkout\n","import React from 'react'\nimport Checkout from '../Checkout/Checkout';\nimport \"./AddCart.css\";\nimport checkmark from '../../checkmark.png'\nfunction AddCart(props) {\n    // console.log('props from addcart', props)\n\n    return (\n        <React.Fragment>\n            {\n                props.checkout ?\n\n                    <div className=\"popupModal\">\n                        <h2>Checkout</h2>\n                        <img src={checkmark} alt=\"checkmark\" className=\"checkmark-icon\" />\n                        <p>\n                            Total Price of Rs {props.price}-/ paid successfully\n\n                        </p>\n                        <button onClick={props.closeCheckoutHandler} className=\"closeButton\">x</button>\n                    </div>\n                    : ''\n            }\n\n\n            <div className=\"addcart\">\n                <span className=\"cart-qp\">\n                    <button>Qty: {props.quatity}</button>\n                    <button>Total Price: {props.price}</button>\n                </span>\n                <div className=\"flexgap\"></div>\n                <div className=\"cart-cc\">\n\n                    <button onClick={props.clearCart}>Clear Cart</button>\n                    <button onClick={props.checkoutHandler}>Checkout</button>\n                </div>\n            </div>\n        </React.Fragment>\n    )\n}\n\nexport default AddCart\n","import React, { Component } from 'react'\nimport './Product.css';\nimport AddCart from '../AddCart/AddCart';\n\nexport default class Product extends Component {\n    constructor() {\n        super()\n        this.state = {\n            addcart: false,\n            checkout: false,\n            isLoaded: false,\n            error: '',\n            item: [],\n            cart: [],\n            myquantity: 0,\n            tquantity: 0,\n            price: 0,\n            eachiq: 0,\n        }\n    }\n\n    componentDidMount() {\n        fetch('./data.json')\n            .then(response => {\n                return response.json();\n            })\n            .then(data => {\n                this.setState({\n                    isLoaded: true,\n                    items: data\n                });\n            },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    addItemToCartHandler = (item) => {\n        if (this.state.cart.length > 0) {\n            this.state.cart.map((c, index) => {\n                // condition for updating value\n                if (c.id == item.id) {\n                    let cartCopy = [...this.state.cart]\n                    cartCopy[index].tquantity += 1\n                    this.setState({ cart: cartCopy }, () =>\n                        console.log(\"updated cart2\", this.state.cart)\n                    )\n                } else {\n                    this.setState((prevState) => ({\n                        cart: [...prevState.cart, item],\n                    }))\n                }\n            }\n            )\n        }\n        else {\n            this.setState((prevState, props) => ({\n                cart: [...prevState.cart, item],\n            }), () =>\n                console.log(\"updated cart1\", this.state.cart)\n            )\n        }\n\n        // ========================= total update ======================\n        this.setState(prevState => ({\n            addcart: true,\n            myquantity: prevState.myquantity + 1,\n            price: prevState.price + item.price,\n        }))\n\n    }\n\n    removeCartHandler(item) {\n\n        if (this.state.cart.length > 0) {\n            this.state.cart.map((c, index) => {\n                // condition for updating value\n                if (c.id == item.id) {\n                    let cartCopy = [...this.state.cart]\n                    cartCopy[index].tquantity -= 1\n                    this.setState({ cart: cartCopy })\n                } else {\n                    if (this.state.myquantity > 0) {\n\n                        this.setState(prevState => ({\n                            cart: [...prevState.cart, item],\n                        }))\n                    }\n                }\n            }\n            )\n        }\n        else {\n            if (this.state.myquantity > 0) {\n\n                this.setState(prevState => ({\n                    cart: [...prevState.cart, item],\n                }))\n            }\n        }\n\n        if (this.state.myquantity > 0) {\n            this.setState(prevState => ({\n                ...this.state,\n                myquantity: prevState.myquantity - 1,\n                price: prevState.price - item.price,\n            }))\n        }\n    }\n\n    getDerivedSttaeFromProps() {\n        this.addItemToCartHandler()\n        this.removeCartHandler()\n    }\n\n    clearCart = () => {\n        this.setState({\n            addcart: false,\n            checkout: false,\n            item: [],\n            cart: [],\n            myquantity: 0,\n            tquantity: 0,\n\n        })\n    }\n\n    checkoutHandler = (item) => {\n        this.setState({\n            checkout: true,\n            price: item.price\n        })\n    }\n\n    closeCheckoutHandler = () => {\n        this.setState({\n            checkout: false\n        })\n    }\n\n    render() {\n        const { items, error, isLoaded, eachiq, price, addcart, checkout, cart, myquantity } = this.state;\n        console.log(' items ====', items)\n        console.log('this.state.cart ===>', this.state.cart)\n        // console.log('cart each quatitiy', eachiq)\n        // console.log('mytquantity', myquantity)\n        if (error) {\n            return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return (\n                <React.Fragment>\n                    {\n                        items.map(item => (\n                            <div className=\"product\" key={item.id}>\n                                <div className=\"product-img\">\n                                    <img src={item.image} alt=\"product\" className=\"productimg\" />\n                                    <p>flat {item.offer} off</p>\n                                </div>\n                                <div className=\"product-details\">\n                                    <ul>\n                                        <li>{item.brand_name}</li>\n                                        <li>{item.product_name}</li>\n                                        <li>{item.quatity}</li>\n                                        <li>MRP: {item.mrp}</li>\n                                        <li>Rs: {item.price}</li>\n                                        <li className=\"add-cart\">\n                                            <button onClick={(e) => this.addItemToCartHandler(item)} >Add Cart</button>\n                                            {\n                                                item.tquantity > 0 ?\n                                                    <button onClick={() => this.removeCartHandler(item)}>-</button>\n                                                    :\n                                                    <button onClick={() => this.removeCartHandler(item)} className=\"btn-disabled\" disabled>-</button>\n\n\n                                            }\n                                            <button>\n                                                {item.tquantity === 1 ? \"0\" : item.tquantity}\n                                            </button>\n                                            <button onClick={() => this.addItemToCartHandler(item)}>+</button>\n                                        </li>\n                                    </ul>\n                                </div>\n                                {\n                                    addcart ? <AddCart\n                                        quatity={myquantity} checkout={checkout} price={price}\n                                        clearCart={this.clearCart}\n                                        checkoutHandler={() => this.checkoutHandler(item)}\n                                        closeCheckoutHandler={this.closeCheckoutHandler}\n                                    />\n                                        : ''\n                                }\n                            </div>\n                        ))\n                    }\n                </React.Fragment>\n\n            )\n        }\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport Product from './components/Product/Product';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n        {/* <ProductList /> */}\n        <div className=\"products-list\">\n          <h2>Product List</h2>\n          <div className=\"all-product-list\">\n            <Product />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}